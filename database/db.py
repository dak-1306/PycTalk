# database/db.py
import mysql.connector
from mysql.connector import Error

class MySQLDatabase:
    def __init__(self, host="localhost", user="root", password="", database="pyctalk"):
        self.host = host
        self.user = user
        self.password = password
        self.database = database
        self.connection = None
        self.cursor = None
        self.connect()

    def connect(self):
        """K·∫øt n·ªëi t·ªõi MySQL server."""
        if self.connection is not None and self.connection.is_connected():
            return  # tr√°nh k·∫øt n·ªëi l·∫°i
        try:
            self.connection = mysql.connector.connect(
                host=self.host,
                user=self.user,
                password=self.password,
                database=self.database,
                autocommit=True,  # T·ª± ƒë·ªông commit
                charset='utf8mb4',
                use_unicode=True,
                connection_timeout=10,  # Timeout 10 gi√¢y
                auth_plugin='mysql_native_password'
            )
            self.cursor = self.connection.cursor(dictionary=True)
            print("‚úÖ ƒê√£ k·∫øt n·ªëi MySQL Database th√†nh c√¥ng.")
        except Error as e:
            print(f"‚ùå L·ªói khi k·∫øt n·ªëi MySQL: {e}")
            self.connection = None
            self.cursor = None

    def disconnect(self):
        """ƒê√≥ng k·∫øt n·ªëi MySQL."""
        if self.cursor:
            self.cursor.close()
        if self.connection:
            self.connection.close()
            print("üîå ƒê√£ ng·∫Øt k·∫øt n·ªëi MySQL Database.")

    def execute(self, query, params=()):
        """D√πng cho INSERT, UPDATE, DELETE."""
        try:
            if not self.connection or not self.connection.is_connected():
                self.connect()
            self.cursor.execute(query, params)
            if not self.connection.autocommit:
                self.connection.commit()
        except Error as e:
            print(f"‚ùå L·ªói SQL Execute: {e}")
            if self.connection:
                self.connection.rollback()

    def fetch_one(self, query, params=()):
        """D√πng cho SELECT 1 d√≤ng."""
        try:
            if not self.connection or not self.connection.is_connected():
                self.connect()
            self.cursor.execute(query, params)
            return self.cursor.fetchone()
        except Error as e:
            print(f"‚ùå L·ªói SQL Fetch One: {e}")
            return None

    def fetch_all(self, query, params=()):
        """D√πng cho SELECT nhi·ªÅu d√≤ng."""
        try:
            if not self.connection or not self.connection.is_connected():
                self.connect()
            self.cursor.execute(query, params)
            return self.cursor.fetchall()
        except Error as e:
            print(f"‚ùå L·ªói SQL Fetch All: {e}")
            return []

# Kh·ªüi t·∫°o th·ªÉ hi·ªán duy nh·∫•t
db = MySQLDatabase()
