# database/db.py
import asyncio
import aiomysql


class AsyncMySQLDatabase:
    def __init__(self, host="localhost", user="root", password="dang13062005", database="pyctalk"):
        self.host = host
        self.user = user
        self.password = password
        self.database = database
        self.pool = None

    async def connect(self):
        """K·∫øt n·ªëi t·ªõi MySQL server v·ªõi connection pool."""
        if self.pool is not None:
            return  # tr√°nh t·∫°o l·∫°i pool
        try:
            self.pool = await aiomysql.create_pool(
                host=self.host,
                user=self.user,
                password=self.password,
                db=self.database,
                autocommit=True,     # t·ª± ƒë·ªông commit
                charset="utf8mb4",
                use_unicode=True,
                minsize=1,           # s·ªë k·∫øt n·ªëi t·ªëi thi·ªÉu
                maxsize=10,          # s·ªë k·∫øt n·ªëi t·ªëi ƒëa
                connect_timeout=10   # timeout k·∫øt n·ªëi
            )
            print("‚úÖ ƒê√£ k·∫øt n·ªëi MySQL Database (async) th√†nh c√¥ng.")
        except Exception as e:
            print(f"‚ùå L·ªói khi k·∫øt n·ªëi MySQL (async): {e}")
            self.pool = None

    async def disconnect(self):
        """ƒê√≥ng connection pool."""
        if self.pool:
            self.pool.close()
            await self.pool.wait_closed()
            print("üîå ƒê√£ ng·∫Øt k·∫øt n·ªëi MySQL Database (async).")

    async def execute(self, query, params=()):
        """D√πng cho INSERT, UPDATE, DELETE."""
        try:
            if self.pool is None:
                await self.connect()
            async with self.pool.acquire() as conn:
                async with conn.cursor() as cursor:
                    await cursor.execute(query, params)
        except Exception as e:
            print(f"‚ùå L·ªói SQL Execute (async): {e}")
            raise  # B√°o l·ªói l√™n tr√™n ƒë·ªÉ messenger_db.py nh·∫≠n bi·∫øt
    async def fetch_one(self, query, params=()):
        """D√πng cho SELECT 1 d√≤ng."""
        try:
            if self.pool is None:
                await self.connect()
            async with self.pool.acquire() as conn:
                async with conn.cursor(aiomysql.DictCursor) as cursor:
                    await cursor.execute(query, params)
                    return await cursor.fetchone()
        except Exception as e:
            print(f"‚ùå L·ªói SQL Fetch One (async): {e}")
            return None

    async def fetch_all(self, query, params=()):
        """D√πng cho SELECT nhi·ªÅu d√≤ng."""
        try:
            if self.pool is None:
                await self.connect()
            async with self.pool.acquire() as conn:
                async with conn.cursor(aiomysql.DictCursor) as cursor:
                    await cursor.execute(query, params)
                    return await cursor.fetchall()
        except Exception as e:
            print(f"‚ùå L·ªói SQL Fetch All (async): {e}")
            return []


# Kh·ªüi t·∫°o th·ªÉ hi·ªán duy nh·∫•t
db = AsyncMySQLDatabase()
